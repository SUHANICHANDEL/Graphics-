#include <GL/glut.h>
#include <iostream>
const int sW = 800;
const int sH = 600;
int x1 = 400, y1 = 300;
int r = 100;
GLfloat bcolor[] = { 0.0f, 0.0f, 0.0f };
GLfloat fcolor[] = { 0.0f, 1.0f, 0.0f };
void getPixelColor(int x, int y, GLfloat color[3]) {
glReadPixels(x, y, 1, 1, GL_RGB, GL_FLOAT, color);
}
void setPixelColor(int x, int y, GLfloat color[3]) {
glBegin(GL_POINTS);
glColor3fv(color);
glVertex2i(x, y);
glEnd();
glFlush();
}
void boundaryFill(int x, int y) {
GLfloat color[3];
getPixelColor(x, y, color);
if ((color[0] !=bcolor[0] || color[1] !=bcolor[1] || color[2] !=bcolor[2]) &&
(color[0] != fcolor[0] || color[1] != fcolor[1] || color[2] != fcolor[2])) {
setPixelColor(x, y, fcolor);
boundaryFill(x + 1, y);
boundaryFill(x - 1, y);
boundaryFill(x, y + 1);
boundaryFill(x, y - 1);
}
}
void plotCirclePoints(int x3, int y3, int x, int y) {
setPixelColor(x3 + x, y3 + y,bcolor);
setPixelColor(x3 - x, y3 + y,bcolor);
setPixelColor(x3 + x, y3 - y,bcolor);
setPixelColor(x3 - x, y3 - y,bcolor);
setPixelColor(x3 + y, y3 + x,bcolor);
setPixelColor(x3 - y, y3 + x,bcolor);
setPixelColor(x3 + y, y3 - x,bcolor);
setPixelColor(x3 - y, y3 - x,bcolor);
}
void drawCircle(int x1, int y1, int r) {
int x = 0;
int y = r;
int p = 1 - r;
plotCirclePoints(x1, y1, x, y);
while (x < y) {
x++;
if (p < 0) {
p += 2 * x + 1;
} else {
y--;
p += 2 * (x - y) + 1;
}
plotCirclePoints(x1, y1, x, y);
}
}
void mouseClick(int button, int state, int x, int y) {
if (button == GLUT_LEFT_BUTTON && state == GLUT_DOWN) {
int invertedY = sH - y;
boundaryFill(x, invertedY);
glutPostRedisplay();
}
}
void display() {
glClear(GL_COLOR_BUFFER_BIT);
drawCircle(x1, y1, r);
glColor3f(0.0, 0.0, 0.0);
glRasterPos2i(10, 10);
std::string nameAndID = "SUHANI CHANDEL - 500108261";
for (char c : nameAndID) {
glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, c);
}
glFlush();
}
void init() {
glClearColor(0.9, 0.9, 0.9, 1.0);
glColor3f(0.0, 0.0, 0.0);
glPointSize(1.0);
glMatrixMode(GL_PROJECTION);
glLoadIdentity();
glOrtho(0.0, sW, 0.0, sH, -1.0, 1.0);
}
int main(int argc, char** argv) {
glutInit(&argc, argv);
glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
glutInitWindowSize(sW, sH);
glutCreateWindow("Boundary Fill Algorithm with Name and Roll Number");
init();
glutDisplayFunc(display);
glutMouseFunc(mouseClick);
glutMainLoop();
return 0;
}
